name: Chrome Remote Desktop with Serveo

on:
  push:
  workflow_dispatch:
    inputs:
      code:
        description: 'Enter the --code value for Chrome Remote Desktop'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360
    
    steps:
      - name: Enable Terminal Services and Firewall Rules
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

      - name: Set Password for runneradmin
        run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
      
      - name: Create Keep-Alive Script
        run: |
          $keepAliveScript = @"
          while ($true) {
              ssh -R 80:localhost:3389 serveo.net
              # Connect to the remote session to keep it alive
              mstsc /v:$Env:COMPUTERNAME
              echo "Keep-Alive"
              Start-Sleep -Seconds 300  # Sleep for 5 minutes
          }
          "@
          # Specify directory to make it easier to manage
          $keepAlivePath = "C:\keepalive"
          New-Item -Path $keepAlivePath -ItemType Directory -Force
          Set-Content -Path "$keepAlivePath\keepalive.ps1" -Value $keepAliveScript

      - name: Download Urban VPN Extension
        run: |
          # Download the CRX file from the provided URL
          Invoke-WebRequest https://github.com/amizippe/winpc23/raw/main/urbanvpn.crx -OutFile urbanvpn.crx

      - name: Verify Download
        run: |
            if (Test-Path "urbanvpn.crx") {
              Write-Output "urbanvpn.crx downloaded successfully!"
              echo "downloaded urban vpn"
            } else {
              Write-Error "Failed to download urbanvpn.crx"
              echo "not downloaded urban vpn"
              exit 1  # Optional: Fail the workflow if the file is not found
            }

      - name: Print Current Working Directory
        run: |
          $currentDirectory = Get-Location
          Write-Output "Current working directory: $currentDirectory"

      - name: Install Urban VPN Extension
        run: |
          # Construct the Chrome path explicitly
          $chromePath = Join-Path 'C:\Program Files (x86)\Google\Chrome\Application' 'chrome.exe'

          # Use the 'call' operator to ensure correct path handling and provide the full path to the CRX
          & $chromePath --pack-extension="D:\a\winpc23\winpc23\urbanvpn.crx"
          
      - name: Download and Install Chrome Remote Desktop Host
        run: |
          Invoke-WebRequest https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi -OutFile chromeremotedesktophost.msi
          Start-Process msiexec.exe -ArgumentList '/i chromeremotedesktophost.msi /quiet /norestart' -Wait

      - name: Download and Install Chrome Browser (if not installed)
        run: |
          if (!(Test-Path 'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe')) {
            Invoke-WebRequest https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7B5C96554B-A69D-5129-C73F-6C3035311776%7D%26lang%3Den%26browser%3D4%26usagestats%3D1%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/update2/installers/ChromeSetup.exe -OutFile ChromeSetup.exe
            Start-Process -FilePath ChromeSetup.exe -ArgumentList "/silent /install" -Wait
          }
      


      - name: Install Urban VPN Extension
        run: |
         # Install the extension silently
          $chromePath = '"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"' # Enclose in quotes
          Start-Process -FilePath $chromePath -ArgumentList "--pack-extension=$PWD\urbanvpn.crx" -Wait # Remove backticks




      
      - name: Start Chrome Remote Desktop & Serveo Tunnel
        run: |
          # Start PowerShell script to launch Chrome Remote Desktop host
          Start-Process -FilePath "powershell.exe" -ArgumentList "-NoExit -Command & {& '${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe' --code='${{ github.event.inputs.code }}' --redirect-url='https://remotedesktop.google.com/_/oauthredirect' --name=$Env:COMPUTERNAME}"
          
          Start-Sleep -Seconds 5
          Add-Type -AssemblyName System.Windows.Forms
          [System.Windows.Forms.SendKeys]::SendWait("123456")
          Start-Sleep -Seconds 1
          [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")
          Start-Sleep -Seconds 1
          [System.Windows.Forms.SendKeys]::SendWait("123456")
          Start-Sleep -Seconds 1
          [System.Windows.Forms.SendKeys]::SendWait("{ENTER}")

          Start-Process -FilePath "powershell.exe" -ArgumentList "-File C:\keepalive\keepalive.ps1" -NoNewWindow
          
          # Start Serveo tunnel in the background
          ssh -R 80:localhost:3389 serveo.net &

           # Open Google in Chrome with Urban VPN enabled
          Start-Process $chromePath -ArgumentList "https://www.google.com"

          
          # Get the assigned Serveo URL
          $serveoUrl = (ssh -R 80:localhost:3389 serveo.net 2>&1 | Select-String -Pattern "https://.*").Matches.Value
          Write-Output "Serveo URL: $serveoUrl"

          while ($true) {
          echo "Keep-Alive"
          if (!(Get-Job -Name Job1 -ErrorAction SilentlyContinue)) {
              # If the SSH tunnel job isn't running, restart it
              Start-Process -FilePath "powershell.exe" -ArgumentList "-File C:\keepalive\keepalive.ps1" -NoNewWindow
          }
          Start-Sleep -Seconds 600 
          }
